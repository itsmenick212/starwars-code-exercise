{"ast":null,"code":"var _jsxFileName = \"/Users/nickgupta/Documents/starwars-code-exercise/starwars-code-exercise/src/PlanetAutocomplete.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport debounce from 'lodash.debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetAutocomplete = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [planets, setPlanets] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const fetchPlanets = async query => {\n    setIsLoading(true);\n    try {\n      const response = await axios.get(\"https://swapi.dev/api/planets/?search=\".concat(query));\n      setPlanets(response.data.results);\n    } catch (error) {\n      console.error(\"Failed to fetch planets:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Wrap the call to `fetchPlanets` in a debounced function\n  const debouncedSearch = debounce(fetchPlanets, 500);\n  useEffect(() => {\n    if (searchTerm.length >= 2) {\n      debouncedSearch(searchTerm);\n    }\n    // Cleanup function to cancel the debounce on component unmount\n    return () => {\n      debouncedSearch.cancel();\n    };\n  }, [searchTerm, debouncedSearch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to search for a planet...\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      onFocus: () => searchTerm.length >= 2 && fetchPlanets(searchTerm),\n      onBlur: () => setTimeout(() => setPlanets([]), 100)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: planets.map((planet, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setSearchTerm(planet.name),\n        children: planet.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetAutocomplete, \"KbvOixLVoSUes6NzO7J0n94Ag8U=\");\n_c = PlanetAutocomplete;\nexport default PlanetAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"PlanetAutocomplete\");","map":{"version":3,"names":["React","useState","useEffect","axios","debounce","jsxDEV","_jsxDEV","PlanetAutocomplete","_s","searchTerm","setSearchTerm","planets","setPlanets","isLoading","setIsLoading","fetchPlanets","query","response","get","concat","data","results","error","console","debouncedSearch","length","cancel","children","type","placeholder","value","onChange","e","target","onFocus","onBlur","setTimeout","fileName","_jsxFileName","lineNumber","columnNumber","map","planet","index","onClick","name","_c","$RefreshReg$"],"sources":["/Users/nickgupta/Documents/starwars-code-exercise/starwars-code-exercise/src/PlanetAutocomplete.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport debounce from 'lodash.debounce';\n\ninterface Planet {\n  name: string;\n}\n\nconst PlanetAutocomplete: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [planets, setPlanets] = useState<Planet[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const fetchPlanets = async (query: string) => {\n    setIsLoading(true);\n    try {\n      const response = await axios.get(`https://swapi.dev/api/planets/?search=${query}`);\n      setPlanets(response.data.results);\n    } catch (error) {\n      console.error(\"Failed to fetch planets:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Wrap the call to `fetchPlanets` in a debounced function\n  const debouncedSearch = debounce(fetchPlanets, 500);\n\n  useEffect(() => {\n    if (searchTerm.length >= 2) {\n      debouncedSearch(searchTerm);\n    }\n    // Cleanup function to cancel the debounce on component unmount\n    return () => {\n      debouncedSearch.cancel();\n    };\n  }, [searchTerm, debouncedSearch]);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Type to search for a planet...\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        onFocus={() => searchTerm.length >= 2 && fetchPlanets(searchTerm)}\n        onBlur={() => setTimeout(() => setPlanets([]), 100)}\n      />\n      {isLoading && <div>Loading...</div>}\n      <ul>\n        {planets.map((planet, index) => (\n          <li key={index} onClick={() => setSearchTerm(planet.name)}>\n            {planet.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default PlanetAutocomplete;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}